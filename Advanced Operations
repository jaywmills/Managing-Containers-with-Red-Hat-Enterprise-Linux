Sometimes we want some ease of use and automation for our containers. 
Fortunately, podman can generate configuration files to turn our container into a service that we can run rootless and configure for persistence. 
We can turn a container with network and persistent storage into a systemd container service.

Key Commands
1. podman run -d --name <container_name>
    a. Launch a new container to use as a model to generate the systemd unit files.
2. podman generate systemd
    a. Generate systemd unit file from your container. Must delete the container as systemd will create a new one.
3. podman stop|rm <container>
    a. Remove the container you created before you try to start your systemd container.

systemd commands:
1. loginctl enable-linger → enables persistence of non root systemd containers.
2. loginctl disable-linger → disables persistence of non root systemd containers.
3. loginctl show-user <username> → shows a user configuration (good for checking whether linger is enabled or disabled) for that user
4. systemctl --user daemon-reload → used after adding new systemd containers to update our configuration
5. systemctl --user start|stop|enable UNIT → used to configure user systemd containers.

Unit files: ~/.config/systemd/user/

Let’s configure the user’s systemd environment.
    
We’re going to create the ~/.config/systemd/user directory in our home directory.
# > mkdir -p ~/.config/systemd/user
# > cd ~./config/systemd/user

We need a directory for persistent storage.
~./config/systemd/user # > mkdir ~/web_data

We’re going to use this directory to attach as a persistent volume.
~./config/systemd/user # > echo “Test data” > ~/web_data/test.txt

Now create a container that we’re going to use to generate our systemd unit files.
~./config/systemd/user # > podman run -d --name web_server -p 8000:8080 -v ~/web_data:/var/www/html:Z registry.access.redhat.com/rhscl/httpd-24-rhel7

~./config/systemd/user # > podman ps -a
We have our running container.

~./config/systemd/user # > curl http://localhost:8000/test.txt 
"Test data"

Now that we have a working container, we can generate the systemd unit files using this container.
~./config/systemd/user # > podman generate systemd --name web_server --files --new /home/user/.config/systemd/user/container-web_server.service 
~./config/systemd/user # > less container-web_server.service
Auto-generated by podman. We see our three sections: unit, service, and install.

Before we move forward with systemd containers, let’s clean everything else up here in podman world.
~./config/systemd/user # > podman ps -a
~./config/systemd/user # > podman stop web_server 
~./config/systemd/user # > podman rm web_server 
~./config/systemd/user # > podman ps -a

Now that our original container is gone, let’s launch a container using our systemd unit file. 
We’re going to configure our container to start when the system boots. 

The first thing we need to do is enable linger for our user.  
~./config/systemd/user # > loginctl enable-linger
~./config/systemd/user # > loginctl show-user cloud_user | grep -i linger Linger=yes

The next thing we want to do is reload systemd to pick up the new unit file.
~./config/systemd/user # > systemctl --user daemon-reload
~./config/systemd/user # > systemctl --user enable --now container-web_server.service 
Created symbolic links for our container service in our home directory.

~./config/systemd/user # > systemctl --user status container-web_server.service
We have a systemd container running.

~./config/systemd/user # > podman ps -a 
We see our container there.

To check out work and pull our text.txt file and see if it is functioning how we want.
~./config/systemd/user # > curl http://localhost:8000/test.txt 
"Test data"

We will test our container service with a reboot to ensure persistance and reconnect to it. 
~ # > sudo systemctl reboot
~ # > systemctl --user status container-web_server.service
"active (running)"

Checking with podman, we see our container is up and let’s do one final check.
~ # > podman ps -a
~ # > curl http://localhost:8000/text.txt
"Test data"
